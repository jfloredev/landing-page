name: 🚀 Deploy React Landing Page

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  # Job de testing y build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🧪 Run linter
      run: npm run lint
      
    - name: 🔨 Build application
      run: npm run build
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 1

  # Job para deploy en AWS Amplify
  deploy-amplify:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-and-build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 📥 Install Amplify CLI
      run: npm install -g @aws-amplify/cli
      
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🚀 Deploy to Amplify
      run: |
        amplify init --yes
        amplify publish --yes
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Job para build y push de Docker image
  docker-build-and-push:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-and-build
    runs-on: ubuntu-latest
    
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔐 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: 🐳 Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: react-landing-page
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY
        
        # Build and push Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Job para notificar completion
  notify-completion:
    if: always() && github.ref == 'refs/heads/main'
    needs: [test-and-build, deploy-amplify, docker-build-and-push]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📊 Check deployment status
      run: |
        echo "🔍 Deployment Summary:"
        echo "- Test and Build: ${{ needs.test-and-build.result }}"
        echo "- Amplify Deploy: ${{ needs.deploy-amplify.result }}"
        echo "- Docker Build: ${{ needs.docker-build-and-push.result }}"
        
        if [[ "${{ needs.test-and-build.result }}" == "success" ]]; then
          echo "✅ Application built successfully"
        fi
        
        if [[ "${{ needs.deploy-amplify.result }}" == "success" ]]; then
          echo "🌐 Amplify deployment completed"
        fi
        
        if [[ "${{ needs.docker-build-and-push.result }}" == "success" ]]; then
          echo "🐳 Docker image pushed to ECR"
          echo "Image: ${{ needs.docker-build-and-push.outputs.image-uri }}"
        fi
